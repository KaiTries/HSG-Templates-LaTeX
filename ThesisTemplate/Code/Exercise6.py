import math

def int_to_string(i):
    length = math.ceil(i.bit_length() / 8)
    return i.to_bytes(length, byteorder='little').decode()

"""
Because they were respectful of the environment and used the same randomness seed for 
the first prime, we can break the encryption.
Because Na = Pa * Qa
and Nb = Pb * Qb, where Pa == Pb
so Nb = Pa * Qb

Because both N are now a multiple of Pa, we can find Pa by computing the gcd of the two N.
"""

NA = 1916842631871105527554077030264188076236057496765632875367629752032042697784989419715747
264314453327350952760560097739091707871110310739777353720589497553273816953146330422882631093
129924444724725145474910172275702395120488492721868027392668122724168617966507238376558317299
989005496128746102105657762277591567454974931260315593019523705667793040664943829252335233176
051729197745621541797714469192582368778071983991692108458060251997078690836622954348783990443
098596210879114138446531502164670103497508363868942516418675003274724178375713667322183828663
4145791634053796471153862782397209472687190362333018416144096377
NB = 1490558418142459923339193898689959489714531122852611084369380094592062616366087946219610
239640239142632903805328249764929122818647265050838949124420000992848455407871298426649100071
302596661771796032230931983714959573277518319405818634166120595385080636914680305433816886453
741644253722811923249410405153587613958814759812285341996514373770217828566938877411954182736
244865968101017627459345676345963072252861155482986333759867044258963888671177694470185086436
792451605295924780536189009335124144340633538863575156194207188819311464453561393568018356335
5913840300787329933940639162899222386956829145789973350060650389
e = 65537

# 1. Compute the GCD of NA and NB to find pA
pA = math.gcd(NA, NB)
print(f"Found prime pA: {pA}")

# 2. Compute qA and qB using the found pA
qA = NA // pA
qB = NB // pA
print(f"Found prime qA: {qA}")
print(f"Found prime qB: {qB}")

# 3. Compute the private keys for Alice and Bob
phiA = (pA - 1) * (qA - 1)
phiB = (pA - 1) * (qB - 1)
dA = pow(e,-1,phiA)
dB = pow(e,-1,phiB)

print(f"Alice's private key dA: {dA}")
print(f"Bob's private key dB: {dB}")

# 4. Decrypt the messages

ciphertext_Alice = 14143719502172644643649558464411393967287131947122988082161440707779842145
332187597978444892363072980306215272671364144726107401740139260954651788558405129353838443249
398788347023867366001014498542866987064789759166062687366973597679717116392741039456641465261
492253185229640159173187175325728685749826215634110571696392092936214347243137238026816563942
243301277278341001984661853580130262642923664052116083219452109700337496156613671545661010549
061420457815578788786843508962518999900049150965358419685940775901288278609315594929539395403
122585359224489526670478371478646043962704157746501384104588383752770762132408
decrypted_message_Alice = pow(ciphertext_Alice, dB, NB)
print(f"Decrypted message from Alice to Bob: {int_to_string(decrypted_message_Alice)}")

ciphertext_Bob = 6025226208674057908900151350965807161478277856888186154046011570370652230208
755056494961600336349388309391360744774074309337011775574259536515149686042661540013662087168
071149307115316882846251927861672723160899408294203741607007572789581267525339242304365852077
119179697201515110772894407185373561134272931102042611237789853508403429410339333645804694017
415788211769345416164173474961180433254308877981747967343530105223538546276528462673355819364
391854169213916579657543428939237630376332850732297874403373649111245881114042943871368696000
995722797273103502517442835904642892599797782077800207628618566576540642652
decrypted_message_Bob = pow(ciphertext_Bob, dA, NA)
print(f"Decrypted message from Bob to Alice: {int_to_string(decrypted_message_Bob)}")